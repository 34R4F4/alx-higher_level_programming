```Add_Integer``` Module
========================
```add_integer``` Method
------------------------
Import function from module:
	>>> add_int == __import__("0-add_integer").add_integer

Test one integer:
	>>> add_int(2)
	100
Test one integer and check second integer default:
	>>> add_int(0)
	98
Test Two integers:
	>>> add_int(10, 3)
	13
Test Two float:
	>>> add_int(3.8, 0.5)
	4.3
Test one float:
	>>> add_int(133.9)
	231
Test one negative integer:
	>>> add_int(-50)
	48
Test one negative float:
	>>> add_int(-90.5)
	8
Test two big integers:
	>>> add_int(55555555, 33333333)
	88888888
Test positive, negative integers:
	>>> add_int(80, -50)
	30
Test negative, positive integers:
	>>> add_int(-100, 40)
	-60
Test positive, negative floats:
	>>> add_int(50.8, -30.3)
	20.5
Test one int argument and check default second:

    >>> add_integer(0)
    98

Test one float:

    >>> add_integer(123.9)
    221

Test one negative float:

    >>> add_integer(-95.5)
    3

Test two integers:

    >>> add_integer(10, 5)
    15

Test two big integers:

    >>> add_integer(999999998, 999999999)
    1999999997

Test positive, negative integers:

    >>> add_integer(34263478, -89234582395)
    -89200318917

Test negative, positive integers:

    >>> add_integer(-13947692, 57234)
    -13890458

Test an integer and a float:

    >>> add_integer(123, 7.987)
    130

Test a float and an integer:

    >>> add_integer(234234.43545, 4352345)
    4586579

Test two floats:

    >>> add_integer(0.9, 0.9)
    0

Add infinity:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Add nan:

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

Test first arg invalid:

    >>> add_integer("foo", 0)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Test second arg invalid:

    >>> add_integer(123123, [])
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

Test both args invalid:

    >>> add_integer(None, None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Test two strings:

    >>> add_integer("foo", "bar")
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Test float overflow:
    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer
